// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Resource {
  id           Int                   @id @default(autoincrement())
  title        String
  tags         Tag[]
  url          String
  image        String
  descriptions ResourceDescriptions?
  status       ResourceStatus        @default(value: SUBMITTED)
  reports      Report[]
  deprecated   Boolean               @default(false)
  authorId     String?
  author       User?                 @relation(fields: [authorId], references: [id])
  visits       UserVisit[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model ResourceDescriptions {
  id         Int      @id @default(autoincrement())
  resourceId Int      @unique
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  en         String
  fr         String?
}

enum ResourceStatus {
  SUBMITTED
  PUBLISHED
}

model Tag {
  id        Int        @id @default(autoincrement())
  slug      String     @unique
  names     TagNames?
  resources Resource[]
}

model TagNames {
  id    Int     @id @default(autoincrement())
  tagId Int     @unique
  tag   Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  en    String
  fr    String?
}

model Report {
  id          Int        @id @default(autoincrement())
  type        ReportType
  description String
  resourceId  Int?
  Resource    Resource?  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
}

enum ReportType {
  RESOURCE_DELETED
  RESOURCE_DUPLICATE
  RESOURCE_CUSTOM
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  userId            String  @map("user_id")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  username      String
  email         String      @unique
  emailVerified DateTime?
  image         String
  accounts      Account[]
  sessions      Session[]
  resources     Resource[]
  visits        UserVisit[]
}

model UserVisit {
  id         Int      @id @default(autoincrement())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resourceId Int
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  visitedAt  DateTime

  @@unique([userId, resourceId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
